const fs = require('fs')
const path = require('path')
const async = require('async')
const svgSourceDir = path.join(__dirname, '..', 'svgs', 'icons')
const targetDir = path.join(__dirname, '..', '..', 'imports', 'ui', 'images', 'icons')
const mkdirp = require('mkdirp')

async.waterfall([
  makeTargetDir,
  findSvgs,
  createIndex,
  extractSvgs,
  createComponents
], function (err) {
  if (err) throw err
})

function makeTargetDir (next) {
  mkdirp(targetDir, () => next())
}

function findSvgs (next) {
  fs.readdir(svgSourceDir, (err, icons) => {
    next(err, icons.filter((i) => path.extname(i) === '.svg'))
  })
}

function extractSvgs (icons, next) {
  async.map(icons, function (icon, finish) {
    const readPath = path.join(svgSourceDir, icon)
    const fileName = icon.replace('.svg', '.jsx')
    fs.readFile(readPath, (err, def) => finish(err, {fileName, def}))
  }, next)
}

function createComponents (svgs, next) {
  async.map(svgs, function (svg, finish) {
    const writePath = path.join(targetDir, svg.fileName)
    const fileContent = wrap(svg)
    fs.writeFile(writePath, fileContent, finish)
  }, next)
}

function wrap (svg) {
  const ComponentName = toCamalCase(svg.fileName)
  const iconName = svg.fileName.replace('.jsx', '')
  return `// DO NOT EDIT! Generated by private/build/createSvgComponents.jsx
import React from 'react'
export default function ${ComponentName} (props) {
  const className = \`svg-icon svg-icon-${iconName} \${props.className ? props.className :''}\`
  return (<span {...props} className={className} dangerouslySetInnerHTML={{ __html: \`
${svg.def}
  \` }}></span>)
}
`
}

function toCamalCase (slug) {
  return slug
    .split('-')
    .map((iconName) => iconName.charAt(0).toUpperCase() + iconName.slice(1))
    .join('')
    .replace('.svg', '')
    .replace('.jsx', '')
}

function createIndex (icons, next) {
  const writePath = path.join(targetDir, 'index.js')
  const index = [createListOfImports(icons), createListOfExports(icons)].join('')
  fs.writeFile(writePath, index, (err) => next(err, icons))
}

function createListOfImports (icons) {
  return icons.reduce((imp, icon) => {
    imp += `import ${toCamalCase(icon)} from './${icon.replace('.svg', '.jsx')}'\n`
    return imp
  }, '')
}

function createListOfExports (icons) {
  return icons.reduce((exp, icon, i) => {
    exp += '  '
    exp += toCamalCase(icon)
    if (i !== icons.length - 1) exp += ',\n'
    if (i === icons.length - 1) exp += '\n}\n'
    return exp
  }, 'export {\n')
}
